@page
@model ErrorModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>Development environment should not be enabled in deployed applications</strong>, as it can result in sensitive information from exceptions being displayed to end users. For local debugging, development environment can be enabled by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>, and restarting the application.
</p>

<script>

    var canvasElementId = 'gridCanvas';

    // Size of each grid cell in pixels.
    var gridSize = 20;
    // Create Canvas
    var canvas = createCanvas(800, 400);
    var ctx = canvas.getContext('2d');
    var event;


    // Add square when clicked.
    canvas.onclick = function (e) {
        $('#exampleModal').modal('show');
        event = e;
    }

    function createSquare() {
        var x = event.clientX;
        var y = event.clientY;

        var width = document.getElementById("lengthFT").value * gridSize + ((document.getElementById("lengthIN").value / 12) * gridSize);
        var height = document.getElementById("widthIN").value * gridSize;
        x = Math.floor(x / width) * width;
        y = Math.floor(y / height) * height;

        console.log(x);console.log(y);

        var sq = document.createElement('div');
        sq.style.position = "absolute";
        sq.style.width = width + 'px';
        sq.style.height = height + 'px';
        sq.style.transform = 'translate(' + x + 'px,' + y + 'px)';
        sq.style.backgroundColor = 'rgba(72,132,192,1)';
        sq.style.borderStyle = 'solid';
        sq.style.borderWidth = '2px';
        sq.style.cursor = 'move';

        // Drag/Drop.
        sq.onmousedown = function () {
            document.onmouseup = function () {
                document.onmousemove = document.onmouseup = '';
            }
            document.onmousemove = (e) => {
                var x = Math.floor(e.clientX / gridSize) * gridSize;
                var y = Math.floor(e.clientY / gridSize) * gridSize;
                this.style.transform = 'translate(' + x + 'px,' + y + 'px)';
            }

        }

        document.body.appendChild(sq);
        $('#exampleModal').modal('hide');
    }

    // Draw Grid.
    drawGrid(ctx, gridSize, canvas.width, canvas.height);

    function drawGrid(ctx, gridSize, w, h) {
        var linesX = w / gridSize;
        var linesY = h / gridSize;
        ctx.strokeStyle = '#CCC';
        for (var x = 0; x < linesX; x++) {
            var start = gridSize * x;
            ctx.moveTo(start, 0);
            ctx.lineTo(start, h);
            ctx.stroke();
        }
        for (var y = 0; y < linesY; y++) {
            var start = gridSize * y;
            ctx.moveTo(0, start);
            ctx.lineTo(w, start);
            ctx.stroke();
        }
    }

    function createCanvas(w, h) {
        var canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        document.getElementById("gridCanvas").appendChild(canvas);
        return canvas;
    }
</script>
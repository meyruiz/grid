@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<body>
    <div id="dialog" title="Cell Settings">
        <div>
            <label>Size</label>
            <span style="right: 0;">
                Length:
                <input type="text" class="item_lenFT" style="width: 35px;"> FT
                <input type="text" class="item_lenIN" style="width: 35px;"> IN

                Width: <input type="text" class="item_w" style="width: 35px;"> IN
            </span>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Enter Cut Size</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Length: <input id="lengthFT" type="text" name="lengthFT"> FT <input id="lengthIN" type="text" name="lengthIN"> IN </p>
                    <p>Width: <input id="widthIN" type="text" name="widthIN"> IN </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary add-cust-cell" href="#add-cust-cell" data-toggle="modal" data-target="#exampleModal">Create</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="scale" class="col-md-2 border" style="height:700px;">
            <p>Scale</p>
            <p>2' x 1.00"</p>
            <hr />
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">Add Cut</button>
            <hr />
            <button type="button" class="btn" style="margin-bottom:15px;" onclick="changeZoom(1)">Zoom In</button>
            <button type="button" class="btn" style="margin-bottom:15px;" onclick="changeZoom(-1)">Zoom Out</button>
            <button type="button" class="btn add-horizontal-offcut" href="#add-horizontal-offcut" style="margin-bottom:15px;">Horizontal Offcut</button>
            <button type="button" class="btn add-vertical-offcut" href="#add-vertical-offcut">Vertical Offcut</button>
        </div>
        <div class="col-md-10">
            <div class="row">
                <div class="col-md-12 border">
                    <p>SIZE: 600' X 84.0000" ITEM: FERROFLEX STEEL REINFORCED BELT    LOT: D0118990-B    CUST: ACME MINING OF MINNESOTA, INC</p>
                    <p>REQUIRED: 2 CUTS - 80'6.0000" X 36.0000 ****1 OF 2 ADDED ****</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 border" style="height:637px;">
                    <div class='ruler-horizontal'>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                    </div>
                    <div class='ruler-vertical'>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                        <div class='in'></div>
                    </div>
                    <div class="grid-container">
                        <ul id="grid" class="grid">
                            <li class="position-highlight">
                                <div class="inner"></div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <button type="button" class="btn save" style="float:right;">Save</button>
    <script async defer id="github-bjs" src="https://buttons.github.io/buttons.js"></script>
</body>


<script type="text/javascript">
    jQuery(document).ready(function ($) {
        var canvasHeight = $('#grid').height();
        var canvasWidth = $('#grid').width();
        console.log(canvasHeight);
        console.log(canvasWidth);
        $('li.ui-draggable-handle').draggable({
            drag: function (evt, ui) {
                // zoom fix
                console.log("drag");
                ui.position.top = Math.round(ui.position.top / zoom);
                ui.position.left = Math.round(ui.position.left / zoom);

                // don't let draggable to get outside of the canvas
                if (ui.position.left < 0)
                    ui.position.left = 0;
                if (ui.position.left + $(this).width() > canvasWidth)
                    ui.position.left = canvasWidth - $(this).width();
                if (ui.position.top < 0)
                    ui.position.top = 0;
                if (ui.position.top + $(this).height() > canvasHeight)
                    ui.position.top = canvasHeight - $(this).height();

            }
        });
    });

    var zoom = 10;

    function setZoom(zoom, el) {

        transformOrigin = [0, 0];
        el = el || instance.getContainer();
        var p = ["webkit", "moz", "ms", "o"],
            s = "scale(" + zoom + ")",
            oString = (transformOrigin[0] * 100) + "% " + (transformOrigin[1] * 100) + "%";

        for (var i = 0; i < p.length; i++) {
            el.style[p[i] + "Transform"] = s;
            el.style[p[i] + "TransformOrigin"] = oString;
        }

        el.style["transform"] = s;
        el.style["transformOrigin"] = oString;

    }

    //setZoom(5,document.getElementsByClassName('container')[0]);

    function showVal(a) {
        var zoomScale = Number(a) / 10;
        setZoom(zoomScale, document.getElementsByClassName('grid')[0])
    }

    function changeZoom(a) {
        zoom += a;
        var zoomScale = Number(zoom) / 10;
        console.log(zoom);
        setZoom(zoomScale, document.getElementsByClassName('grid')[0])

        zoomScale = document.getElementById('grid');
        const element = document.querySelector('.grid');
        //const style = getComputedStyle(element);

        console.log(element.style.transform); // Before pseudo element
        console.log("Scale: " + zoomScale);
    }

    var zoomScale = document.getElementById('grid');
    const element = document.querySelector('.grid');
    const style = getComputedStyle(element);

    console.log(style.transform); // Before pseudo element
    console.log("Scale: " + zoomScale);
   // var canvasHeight = $('#canvas').height();
   // var canvasWidth = $('#canvas').width();

    
</script>
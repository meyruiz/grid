@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<body>
    <div id="dialog" title="Cell Settings">
        <div>
            <label>Size (Width x Height)</label>
            <span style="right: 0;">
                <input type="text" class="item_w" style="width: 35px;">
                x
                <input type="text" class="item_h" style="width: 35px;">
            </span>
        </div>
    </div>
    <div class="row">
        <div id="scale" class="col-md-2 info" style="height:600px;">
            <p>Scale</p>
            <p>2' x 1.00"</p>
            <hr />
            <button href="#add-cell" type="button" class="btn btn-primary add-cell">Add Cut</button>
            <hr />
            <button type="button" class="btn" style="margin-bottom:15px;" onclick="changeZoom(-1)">Zoom In</button>
            <button type="button" class="btn" onclick="changeZoom(1)">Zoom Out</button>
        </div>
        <div class="col-md-10">
            <div class="row">
                <div class="col-md-12 info">
                    <p>SIZE: 600' X 84.0000" ITEM: FERROFLEX STEEL REINFORCED BELT    LOT: D0118990-B    CUST: ACME MINING OF MINNESOTA, INC</p>
                    <p>REQUIRED: 2 CUTS - 80'6.0000" X 36.0000 ****1 OF 2 ADDED ****</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 info" style="height:600px;">
                    <div class="grid-container">
                        <ul id="grid" class="grid">
                            <li class="position-highlight">
                                <div class="inner"></div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="dialog" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Enter Cut Size</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Length: <input id="lengthFT" type="text" name="lengthFT"> FT <input id="lengthIN" type="text" name="lengthIN"> IN </p>
                    <p>Width: <input id="widthIN" type="text" name="widthIN"> IN </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="createSquare()">Create</button>
                </div>
            </div>
        </div>
    </div>
    <script async defer id="github-bjs" src="https://buttons.github.io/buttons.js"></script>
</body>


<script>

    var zoom = 10;

    function setZoom(zoom, el) {

        transformOrigin = [0, 0];
        el = el || instance.getContainer();
        var p = ["webkit", "moz", "ms", "o"],
            s = "scale(" + zoom + ")",
            oString = (transformOrigin[0] * 100) + "% " + (transformOrigin[1] * 100) + "%";

        for (var i = 0; i < p.length; i++) {
            el.style[p[i] + "Transform"] = s;
            el.style[p[i] + "TransformOrigin"] = oString;
        }

        el.style["transform"] = s;
        el.style["transformOrigin"] = oString;

    }

    //setZoom(5,document.getElementsByClassName('container')[0]);

    function showVal(a) {
        var zoomScale = Number(a) / 10;
        setZoom(zoomScale, document.getElementsByClassName('grid-container')[0])
    }

    function changeZoom(a) {
        zoom += a;
        var zoomScale = Number(zoom) / 10;
        console.log(zoom);
        setZoom(zoomScale, document.getElementsByClassName('grid-container')[0])
    }

    var canvasElementId = 'gridCanvas';

    // Size of each grid cell in pixels.
    var gridSize = 20;
    // Create Canvas
    var canvas = createCanvas(800, 400);
    var ctx = canvas.getContext('2d');
    var event;


    // Add square when clicked.
    canvas.onclick = function (e) {
        $('#exampleModal').modal('show');
        event = e;
    }

    function createSquare() {
        var x = event.clientX;
        var y = event.clientY;

        var width = document.getElementById("lengthFT").value * gridSize + ((document.getElementById("lengthIN").value / 12) * gridSize);
        var height = document.getElementById("widthIN").value * gridSize;
        x = Math.floor(x / width) * width;
        y = Math.floor(y / height) * height;

        console.log(x); console.log(y);

        var sq = document.createElement('div');
        sq.style.position = "absolute";
        sq.style.width = width + 'px';
        sq.style.height = height + 'px';
        sq.style.transform = 'translate(' + x + 'px,' + y + 'px)';
        sq.style.backgroundColor = 'rgba(72,132,192,1)';
        sq.style.borderStyle = 'solid';
        sq.style.borderWidth = '2px';
        sq.style.cursor = 'move';

        // Drag/Drop.
        sq.onmousedown = function () {
            document.onmouseup = function () {
                document.onmousemove = document.onmouseup = '';
            }
            document.onmousemove = (e) => {
                var x = Math.floor(e.clientX / gridSize) * gridSize;
                var y = Math.floor(e.clientY / gridSize) * gridSize;
                this.style.transform = 'translate(' + x + 'px,' + y + 'px)';
            }

        }

        document.body.appendChild(sq);
        $('#exampleModal').modal('hide');
    }

    // Draw Grid.
    drawGrid(ctx, gridSize, canvas.width, canvas.height);

    function drawGrid(ctx, gridSize, w, h) {
        var linesX = w / gridSize;
        var linesY = h / gridSize;
        ctx.strokeStyle = '#CCC';
        for (var x = 0; x < linesX; x++) {
            var start = gridSize * x;
            ctx.moveTo(start, 0);
            ctx.lineTo(start, h);
            ctx.stroke();
        }
        for (var y = 0; y < linesY; y++) {
            var start = gridSize * y;
            ctx.moveTo(0, start);
            ctx.lineTo(w, start);
            ctx.stroke();
        }
    }

    function createCanvas(w, h) {
        var canvas = document.createElement('canvas');
        canvas.width = w;
        canvas.height = h;
        document.getElementById("gridCanvas").appendChild(canvas);
        return canvas;
    }
</script>